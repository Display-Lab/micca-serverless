---
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >
  Sinatra SAM Demonstration
  Uses external resources that will not be managed by the stack.

Globals:
  Function:
    Timeout: 5

Parameters:
  MainDomainName:
    Type: String
    Description: Second and top level domain. e.g. example.com

  AppStage:
    Type: String
    Default: example
    Description: deployment stage and subdomain

  DNSCertArn:
    Type: String
    Description: Arn of certificate of custom domain to cover app and auth domains

  ZoneId:
    Type: String
    Description: Hosted zone id of the custom domain

  AuthName:
    Type: String
    Default: CogDemo
    Description: Unique Auth Name for Cognito Resources

  ExtUserPoolId:
    Type: String
    Default: "not-provided"
    Description: Pool Id of external UserPool 

  CookieSecret:
    Type: String
    Description: Session cookie secret

Conditions:
  UseInternalPool: !Equals [ !Ref ExtUserPoolId, "not-provided" ]

Mappings:
  RegionMap:
    us-east-1:
      S3hostedzoneID: Z3AQBSTGFYJSTF
      websiteendpoint: s3-website-us-east-1.amazonaws.com
    us-west-1:
      S3hostedzoneID: Z2F56UZL2M1ACD
      websiteendpoint: s3-website-us-west-1.amazonaws.com

Resources:

  ##########################
  # Serverless API Lambdas #
  ##########################
  
  SinatraFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: SinatraApp
      Handler: lambda.handler
      Runtime: ruby2.5
      Environment:
        Variables:
          POOL_ID: !GetAtt UPClientInfo.UserPoolId
          CLIENT_ID: !GetAtt UPClientInfo.ClientId
          CLIENT_SECRET: !GetAtt UPClientInfo.ClientSecret
          COGNITO_USER_POOL_SITE: !Sub auth.${MainDomainName}
          COGNITO_USER_POOL_ID: !If [ UseInternalPool, !Ref InternalUserPool, !Ref ExtUserPoolId ]
          DOMAIN: !Sub ${AppStage}.${MainDomainName}
          BUCKET: !Ref DataStorageBucket
          COOKIE_SECRET: !Ref CookieSecret
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FeedbackTable
        - S3CrudPolicy:
            BucketName: !Ref DataStorageBucket
      CodeUri: "./sinapp"
      MemorySize: 512
      Timeout: 30
      Layers:
        - !Ref SinatraDependsLayer
      Events:
        SinatraApi:
            Type: Api
            Properties:
                Path: /
                Method: ANY
                RestApiId: !Ref SinatraAPI

  SinatraDependsLayer:
      Type: AWS::Serverless::LayerVersion
      Properties:
          LayerName: sinatra-dependencies
          Description: Gems for Sinatra application
          ContentUri: vendor/bundle/
          CompatibleRuntimes:
            - ruby2.5
          LicenseInfo: 'MIT'
          RetentionPolicy: Delete

  ################################
  # Serverless API Configuration #
  ################################

  SinatraAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: SinatraAPI
      StageName: !Ref AppStage
      EndpointConfiguration: REGIONAL
      Domain:
        DomainName: !Sub ${AppStage}.${MainDomainName}
        CertificateArn: !Ref DNSCertArn 
        Endpointconfiguration: REGIONAL
        Route53:
          HostedZoneId: !Ref ZoneId
          EvaluateTargetHealth: false
      BinaryMediaTypes:
        - 'application~1pdf'
        - '*~1*'
      DefinitionBody:
        swagger: '2.0'
        basePath: '/basepathignored'
        info:
          title: !Ref AWS::StackName
        paths:
          /{proxy+}:
            x-amazon-apigateway-any-method:
              responses: {}
              x-amazon-apigateway-integration:
                uri:
                  !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SinatraFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: POST
                type: "aws_proxy"
          /:
            get:
              responses: {}
              x-amazon-apigateway-integration:
                uri:
                  !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SinatraFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: POST
                type: "aws_proxy"
                contentHandling: CONVERT_TO_BINARY

  ConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - SinatraFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SinatraFunction
      Principal: apigateway.amazonaws.com

  ####################
  # Database Backing #
  ####################

  FeedbackTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: FeedbackServerlessSinatraTable
      PrimaryKey: 
        Name: id
        Type: String
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  ##############
  # S3 Backing #
  ##############

  DataStorageBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub data.${AppStage}.${MainDomainName}

  #############
  # S3 Assets #
  #############

  AssetsBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain
    Properties:
      BucketName: !Sub assets.${MainDomainName}
      AccessControl: PublicRead

  AssetAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: Permit access S3 bucket content only through CloudFront

  DistPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: AssetsBucket
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              CanonicalUser:
                Fn::GetAtt: [ AssetAccessIdentity , S3CanonicalUserId ]
            Action: "s3:GetObject"
            Resource: !Sub "${AssetsBucket.Arn}/*"

  AssetDistribution:
    Type: AWS::CloudFront::Distribution
    DependsOn: AssetsBucket
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt AssetsBucket.DomainName
            Id: S3-micca-assets
            S3OriginConfig:
              OriginAccessIdentity: !Sub origin-access-identity/cloudfront/${AssetAccessIdentity}
        Enabled: 'true'
        Comment: Distribute with cloudfront to get that sweet https
        DefaultRootObject: ''
        IPV6Enabled: 'true'
        Aliases:
          - !Sub assets.${MainDomainName}
        DefaultCacheBehavior:
          MaxTTL: 7200
          DefaultTTL: 3600
          MinTTL: 300
          AllowedMethods:
          - GET
          - HEAD
          TargetOriginId: S3-micca-assets
          ForwardedValues:
            QueryString: 'false'
            Cookies:
              Forward: none
          ViewerProtocolPolicy: redirect-to-https
        PriceClass: PriceClass_200
        ViewerCertificate:
          SslSupportMethod: sni-only
          MinimumProtocolVersion: TLSv1.2_2019
          AcmCertificateArn: !Ref DNSCertArn

  AssetDNS:
    Type: AWS::Route53::RecordSet
    Properties:
      Name: !Sub assets.${MainDomainName} 
      HostedZoneId: !Ref ZoneId
      Comment: Assets subdomain for MICCA
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt AssetDistribution.DomainName
        EvaluateTargetHealth: false


  ########################################
  # Cognito User Pool for Authentication #
  ########################################

  InternalUserPool:
    Type: AWS::Cognito::UserPool
    Condition: UseInternalPool
    Properties:
      UserPoolName: !Sub ${AuthName}-user-pool
      UserNameAttributes: email
      AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true
          InviteMessageTemplate: 
            EmailSubject: "Welcome to Demo MICCA"
            EmailMessage: |
              Hello, 
              <br>
              <p>
              You have been designated as a user of the MICCA project.<br>
              Please use <a href="https://larc.micca.report">this link</a> to login to the MICCA website (https://larc.micca.report)<br> 
              <br></p>
              <p>
              The first time you access the site you will be asked to reset your password.<br>
              Your user name is {username}<br>
              Your temporary password is {####}<br>
              </p>

          UnusedAccountValidityDays: 60
      MfaConfiguration: "OFF"
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: site
          AttributeDateType: String
          Mutable: false
          Required: true

  # Requires an A record that points at either another record or something extant.
  #   Do not point at a defunct application stack.
  #   Record cannot already exist
  AuthSubDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      CustomDomainConfig: 
        CertificateArn: !Ref DNSCertArn 
      Domain: !Sub auth.${MainDomainName}
      UserPoolId: !If [ UseInternalPool, !Ref InternalUserPool, !Ref ExtUserPoolId ]

  AuthDomainRecordSet:
    Type: AWS::Route53::RecordSet
    DependsOn: AuthSubDomain
    Properties:
      Name: !Sub auth.${MainDomainName} 
      HostedZoneId: !Ref ZoneId
      Comment: Custom auth domain for MICCA
      Type: A
      AliasTarget:
        HostedZoneId: Z2FDTNDATAQYW2
        DNSName: !GetAtt UPDomain.CloudFrontDistribution
        EvaluateTargetHealth: false

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${AuthName}-client
      GenerateSecret: true
      UserPoolId: !If [ UseInternalPool, !Ref InternalUserPool, !Ref ExtUserPoolId ]
      CallbackURLs:
        - !Sub "https://${AppStage}.${MainDomainName}/auth/cognito-idp/callback"
      DefaultRedirectURI: !Sub "https://${AppStage}.${MainDomainName}/auth/cognito-idp/callback"
      LogoutURLs:
        - !Sub "https://${AppStage}.${MainDomainName}"
      SupportedIdentityProviders: 
        - COGNITO
      ReadAttributes:
        - email
        - "custom:site"
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH 
        - ALLOW_REFRESH_TOKEN_AUTH
      AllowedOAuthScopes:
        - email
        - profile
        - openid
        - aws.cognito.signin.user.admin
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - implicit
        - code

  ###############################################################
  # Lambdas to look up properties not exposed by CloudFormation #
  ###############################################################
  
  # Policy to allow access to logs and cognito-identity
  LambdaGetUserPoolClientRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - cognito-idp:*
              - cognito-idp:DescribeUserPoolClient
            Resource: arn:aws:cognito-idp:*:*:*

  # Lambda used to get UserPoolClient generated secret
  GetUserPoolClientSecret: 
    Type: AWS::Lambda::Function
    Properties: 
      Description: Look up secret from UserPoolClient 
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaGetUserPoolClientRole.Arn
      Runtime: "python3.7"
      Timeout: 30
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          import logging
          
          def handler(event, context):
            logger = logging.getLogger()
            logger.setLevel(logging.INFO)
            
            # initialize our responses, assume failure by default
            
            response_data = {}
            response_status = cfnresponse.FAILED
            
            logger.info('Received event: {}'.format(json.dumps(event)))
            
            if event['RequestType'] == 'Delete':
              response_status = cfnresponse.SUCCESS
              cfnresponse.send(event, context, response_status, response_data)
              return None
            
            try:
              cognito=boto3.client('cognito-idp')
            except Exception as e:
              logger.info('boto3.client failure: {}'.format(e)) # appease yaml highlighting'
              cfnresponse.send(event, context, response_status, response_data)
              return None
            
            user_pool_id = event['ResourceProperties']['UserPoolId']
            client_id = event['ResourceProperties']['ClientId']

            try:
              user_pool_client = cognito.describe_user_pool_client(UserPoolId=user_pool_id, ClientId=client_id)
            except Exception as e:
              logger.info('cognito.describe_user_pool_client failure: {}'.format(e)) # appease yaml highlighting'
              cfnresponse.send(event, context, response_status, response_data)
              return None

            client_secret = user_pool_client['UserPoolClient']['ClientSecret']
            response_data['ClientSecret'] = client_secret
            response_data['UserPoolId'] = user_pool_id
            response_data['ClientId'] = client_id

            response_status = cfnresponse.SUCCESS
            cfnresponse.send(event, context, response_status, response_data, noEcho=True)

  LambdaGetUserPoolDomainRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - cognito-idp:DescribeUserPoolDomain
            Resource: '*'

  GetUserPoolClientCFDistribution: 
    Type: AWS::Lambda::Function
    Properties: 
      Description: Look up CloudFrontDistribution of UserPoolDomain 
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaGetUserPoolDomainRole.Arn
      Runtime: "python3.7"
      Timeout: 30
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          import logging
          
          def handler(event, context):
            logger = logging.getLogger()
            logger.setLevel(logging.INFO)
            
            # initialize our responses, assume failure by default
            response_data = {}
            response_status = cfnresponse.FAILED
            
            logger.info('Received event: {}'.format(json.dumps(event))) #'
            
            # When you get deleted, congratulate the deleter.
            if event['RequestType'] == 'Delete':
              response_status = cfnresponse.SUCCESS
              cfnresponse.send(event, context, response_status, response_data)
              return None
            
            # Make ourselves a cognito api client
            try:
              cognito=boto3.client('cognito-idp')
            except Exception as e:
              logger.info('boto3.client failure: {}'.format(e)) #'
              cfnresponse.send(event, context, response_status, response_data)
              return None
            
            # Look up the properties of the user pool domain
            # UserPoolDomain is passed in via the event
            user_pool_domain = event['ResourceProperties']['UserPoolDomain']
            try:
              user_pool_domain_info = cognito.describe_user_pool_domain(Domain=user_pool_domain)
            except Exception as e:
              logger.info('cognito.describe_user_pool_client failure: {}'.format(e)) # appease yaml highlighting'
              cfnresponse.send(event, context, response_status, response_data)
              return None

            # Extract the pertient information
            cloudfront_distribution = user_pool_domain_info['DomainDescription']['CloudFrontDistribution']

            # Stuff the information into the response
            response_data['CloudFrontDistribution'] = cloudfront_distribution
            response_data['Foo'] = 'Bar'

            # Ship off the reponse
            response_status = cfnresponse.SUCCESS
            cfnresponse.send(event, context, response_status, response_data, noEcho=True)


  ################################################
  # Custom Resources to hold Lambda derived info #
  ################################################
  
  # Custom Resource to hold user pool DNS alias target for custom domain
  UPDomain:
    Type: Custom::UserPoolCloudFrontDistribution
    Properties:
      ServiceToken: !GetAtt GetUserPoolClientCFDistribution.Arn
      UserPoolDomain: !Sub auth.${MainDomainName}

  # Custom Resource to hold client secret
  UPClientInfo:
    Type: Custom::UserPoolClientInfo
    Properties:
      ServiceToken: !GetAtt GetUserPoolClientSecret.Arn
      UserPoolId: !If [ UseInternalPool, !Ref InternalUserPool, !Ref ExtUserPoolId ]
      ClientId: !Ref UserPoolClient

Outputs:
  SinatraAppUrl:
    Description: App endpoint URL
    Value: !Sub "https://${SinatraAPI}.execute-api.${AWS::Region}.amazonaws.com/${AppStage}/"
  UserPoolId:
    Description: "The UserPoolClient being used by this stack"
    Value: !GetAtt UPClientInfo.UserPoolId
  ApplicationUrl:
    Description: "User facing domain name served by the app"
    Value: !Sub "https://${AppStage}.${MainDomainName}"
  AuthDomain:
    Description: Authorization domain of cognito user pool client
    Value: !Sub auth.${MainDomainName}
  UserPoolDomainTarget:
    Description: "The CloudFront distribution target for A and AAAA aliases."
    Value: !GetAtt UPDomain.CloudFrontDistribution
  DataStorage:
    Description: "The S3 bucket for storing data and reports"
    Value: !Ref DataStorageBucket
