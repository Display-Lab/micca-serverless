---
AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'
Description: >
  Sinatra SAM Demonstration
  Uses external resources that will not be managed by the stack.

Globals:
  Function:
    Timeout: 5

Parameters:
  MainDomainName:
    Type: String
    Description: Second and top level domain. e.g. example.com

  AppStage:
    Type: String
    Default: example
    Description: deployment stage and subdomain

  DNSCertArn:
    Type: String
    Description: Arn of certificate of custom domain to cover app and auth domains

  ZoneId:
    Type: String
    Description: Hosted zone id of the custom domain

  AuthName:
    Type: String
    Default: CogDemo
    Description: Unique Auth Name for Cognito Resources

  ExtUserPoolId:
    Type: String
    Default: "not-provided"
    Description: ARN of external UserPool 

Conditions:
  UseInternalPool: !Equals [ !Ref ExtUserPoolId, "not-provided" ]

Resources:

  ##########################
  # Serverless API Lambdas #
  ##########################
  
  SinatraFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: SinatraApp
      Handler: lambda.handler
      Runtime: ruby2.5
      Environment:
        Variables:
          POOL_ID: !GetAtt UPClientInfo.UserPoolId
          CLIENT_ID: !GetAtt UPClientInfo.ClientId
          CLIENT_SECRET: !GetAtt UPClientInfo.ClientSecret
          COGNITO_USER_POOL_SITE: !Sub auth.${MainDomainName}
          COGNITO_USER_POOL_ID: !If [ UseInternalPool, !Ref InternalUserPool, !Ref ExtUserPoolId ]
          DOMAIN: !Sub ${AppStage}.${MainDomainName}
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FeedbackTable
      CodeUri: "./sinapp"
      MemorySize: 512
      Timeout: 30
      Layers:
        - !Ref SinatraDependsLayer
      Events:
        SinatraApi:
            Type: Api
            Properties:
                Path: /
                Method: ANY
                RestApiId: !Ref SinatraAPI

  SinatraDependsLayer:
      Type: AWS::Serverless::LayerVersion
      Properties:
          LayerName: sinatra-dependencies
          Description: Gems for Sinatra application
          ContentUri: vendor/bundle/
          CompatibleRuntimes:
            - ruby2.5
          LicenseInfo: 'MIT'
          RetentionPolicy: Delete

  ################################
  # Serverless API Configuration #
  ################################

  SinatraAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: SinatraAPI
      StageName: !Ref AppStage
      EndpointConfiguration: REGIONAL
      Domain:
        DomainName: !Sub ${AppStage}.${MainDomainName}
        CertificateArn: !Ref DNSCertArn 
        Endpointconfiguration: REGIONAL
        Route53:
          HostedZoneId: !Ref ZoneId
          EvaluateTargetHealth: false
      DefinitionBody:
        swagger: '2.0'
        basePath: '/basepathignored'
        info:
          title: !Ref AWS::StackName
        paths:
          /{proxy+}:
            x-amazon-apigateway-any-method:
              responses: {}
              x-amazon-apigateway-integration:
                uri:
                  !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SinatraFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: POST
                type: "aws_proxy"
          /:
            get:
              responses: {}
              x-amazon-apigateway-integration:
                uri:
                  !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SinatraFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: POST
                type: "aws_proxy"

  ConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - SinatraFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SinatraFunction
      Principal: apigateway.amazonaws.com

  ####################
  # Database Backing #
  ####################

  FeedbackTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: FeedbackServerlessSinatraTable
      PrimaryKey: 
        Name: id
        Type: String
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5

  #
  # Cognito User Pool for Authentication 
  #

  InternalUserPool:
    Type: AWS::Cognito::UserPool
    Condition: UseInternalPool
    Properties:
      UserPoolName: !Sub ${AuthName}-user-pool
      UserNameAttributes: email
      AdminCreateUserConfig:
          AllowAdminCreateUserOnly: true
          InviteMessageTemplate: 
            EmailSubject: "Welcome to Demo MICCA"
            EmailMessage: "You have been designated as a user of the MICCA project. {username} {####}"
          UnusedAccountValidityDays: 60
      MfaConfiguration: "OFF"
      Schema:
        - Name: email
          AttributeDataType: String
          Mutable: false
          Required: true
        - Name: site
          AttributeDateType: String
          Mutable: false
          Required: true

  # Requires an A record that points at either another record or something extant.
  #   Do not point at a defunct application stack.
  AuthSubDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties: 
      CustomDomainConfig: 
        CertificateArn: !Ref DNSCertArn 
      Domain: auth.inference.es
      UserPoolId: !If [ UseInternalPool, !Ref InternalUserPool, !Ref ExtUserPoolId ]

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub ${AuthName}-client
      GenerateSecret: true
      UserPoolId: !If [ UseInternalPool, !Ref InternalUserPool, !Ref ExtUserPoolId ]
      CallbackURLs:
        - !Sub "https://${AppStage}.${MainDomainName}/auth/cognito-idp/callback"
        - !Sub "https://${AppStage}.${MainDomainName}/dashboard"
      DefaultRedirectURI: !Sub "https://${AppStage}.${MainDomainName}/auth/cognito-idp/callback"
      SupportedIdentityProviders: 
        - COGNITO
      ReadAttributes:
        - email
        - "custom:site"
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_USER_SRP_AUTH 
        - ALLOW_REFRESH_TOKEN_AUTH
      AllowedOAuthScopes:
        - email
        - profile
        - openid
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - implicit

  #
  # Lambda used to get UserPoolClient generated secret
  #
  
  # Policy to allow access to logs and cognito-identity
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
              - cognito-idp:*
              - cognito-idp:DescribeUserPoolClient
              - cognito-idp:DescribeUserPoolDomain
            Resource: arn:aws:cognito-idp:*:*:*

  GetUserPoolClientSecret:
    Type: AWS::Lambda::Function
    Properties: 
      Description: Look up secret from UserPoolClient 
      Handler: index.handler
      MemorySize: 128
      Role: !GetAtt LambdaExecutionRole.Arn
      Runtime: "python3.7"
      Timeout: 30
      Code:
        ZipFile: |
          import json
          import boto3
          import cfnresponse
          import logging
          
          def handler(event, context):
            logger = logging.getLogger()
            logger.setLevel(logging.INFO)
            
            # initialize our responses, assume failure by default
            
            response_data = {}
            response_status = cfnresponse.FAILED
            
            logger.info('Received event: {}'.format(json.dumps(event)))
            
            if event['RequestType'] == 'Delete':
              response_status = cfnresponse.SUCCESS
              cfnresponse.send(event, context, response_status, response_data)
              return None
            
            try:
              cognito=boto3.client('cognito-idp')
            except Exception as e:
              logger.info('boto3.client failure: {}'.format(e)) # appease yaml highlighting'
              cfnresponse.send(event, context, response_status, response_data)
              return None
            
            user_pool_id = event['ResourceProperties']['UserPoolId']
            client_id = event['ResourceProperties']['ClientId']

            try:
              user_pool_client = cognito.describe_user_pool_client(UserPoolId=user_pool_id, ClientId=client_id)
            except Exception as e:
              logger.info('cognito.describe_user_pool_client failure: {}'.format(e)) # appease yaml highlighting'
              cfnresponse.send(event, context, response_status, response_data)
              return None

            client_secret = user_pool_client['UserPoolClient']['ClientSecret']
            response_data['ClientSecret'] = client_secret
            response_data['UserPoolId'] = user_pool_id
            response_data['ClientId'] = client_id

            response_status = cfnresponse.SUCCESS
            cfnresponse.send(event, context, response_status, response_data, noEcho=True)

  #
  # Custom Resource to hold client secret
  #
  UPClientInfo:
    Type: Custom::UserPoolClientInfo
    Properties:
      ServiceToken: !GetAtt GetUserPoolClientSecret.Arn
      UserPoolId: !If [ UseInternalPool, !Ref InternalUserPool, !Ref ExtUserPoolId ]
      ClientId: !Ref UserPoolClient

Outputs:
  SinatraAppUrl:
    Description: App endpoint URL
    Value: !Sub "https://${SinatraAPI}.execute-api.${AWS::Region}.amazonaws.com/${AppStage}/"
  UserPoolId:
    Description: "The UserPoolClient being used by this stack"
    Value: !GetAtt UPClientInfo.UserPoolId
  ApplicationUrl:
    Description: "User facing domain name served by the app"
    Value: !Sub "https://${AppStage}.${MainDomainName}"
  AuthDomain:
    Description: Authorization domain of cognito user pool client
    Value: !Sub auth.${MainDomainName}
