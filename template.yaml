AWSTemplateFormatVersion: '2010-09-09'
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  MainDomainName:
    Type: String
    Description: Second and top level domain. e.g. example.com

  AppStage:
    Type: String
    Default: example
    Description: deployment stage and subdomain

  DNSCertArn:
    Type: String
    Description: Arn of certificate of custom domain

  ZoneId:
    Type: String
    Description: Hosted zone id of the custom domain

Resources:

  ##########################
  # Serverless API Lambdas #
  ##########################
  
  SinatraFunction:
    Type: 'AWS::Serverless::Function'
    Properties:
      FunctionName: SinatraApp
      Handler: lambda.handler
      Runtime: ruby2.5
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref FeedbackTable
      CodeUri: "./sinapp"
      MemorySize: 512
      Timeout: 30
      Layers:
        - !Ref SinatraDependsLayer
      Events:
        SinatraApi:
            Type: Api
            Properties:
                Path: /
                Method: ANY
                RestApiId: !Ref SinatraAPI
  SinatraDependsLayer:
      Type: AWS::Serverless::LayerVersion
      Properties:
          LayerName: sinatra-dependencies
          Description: Gems for Sinatra application
          ContentUri: vendor/bundle/
          CompatibleRuntimes:
            - ruby2.5
          LicenseInfo: 'MIT'
          RetentionPolicy: Delete

  ################################
  # Serverless API Configuration #
  ################################

  SinatraAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: SinatraAPI
      StageName: !Ref AppStage
      EndpointConfiguration: REGIONAL
      Domain:
        DomainName: !Sub ${AppStage}.${MainDomainName}
        CertificateArn: !Ref DNSCertArn 
        Endpointconfiguration: REGIONAL
        Route53:
          HostedZoneId: !Ref ZoneId
          EvaluateTargetHealth: false
      DefinitionBody:
        swagger: '2.0'
        basePath: '/basepathignored'
        info:
          title: !Ref AWS::StackName
        paths:
          /{proxy+}:
            x-amazon-apigateway-any-method:
              responses: {}
              x-amazon-apigateway-integration:
                uri:
                  !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SinatraFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: POST
                type: "aws_proxy"
          /:
            get:
              responses: {}
              x-amazon-apigateway-integration:
                uri:
                  !Sub 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SinatraFunction.Arn}/invocations'
                passthroughBehavior: "when_no_match"
                httpMethod: POST
                type: "aws_proxy"
  ConfigLambdaPermission:
    Type: "AWS::Lambda::Permission"
    DependsOn:
    - SinatraFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SinatraFunction
      Principal: apigateway.amazonaws.com

  ####################
  # Database Backing #
  ####################

  FeedbackTable:
    Type: AWS::Serverless::SimpleTable
    Properties:
      TableName: FeedbackServerlessSinatraTable
      PrimaryKey: 
        Name: id
        Type: String
      ProvisionedThroughput: 
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
Outputs:
  SinatraAppUrl:
    Description: App endpoint URL
    Value: !Sub "https://${SinatraAPI}.execute-api.${AWS::Region}.amazonaws.com/${AppStage}/"
